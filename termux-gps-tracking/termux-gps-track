#!/data/data/com.termux/files/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Copyright (C) 2019 Niccolo Rigacci <niccolo@rigacci.org>

Acquire GPS positions (actually Android locations) via the
Termux:API at specified time intervals, then send collected data
to a remote host via UDP datagrams, at other specified intervals.

The main loop runs for TIME_TO_LIVE seconds, collecting location
data at SAMPLE_PERIOD interval and sending it to REMOTE_HOST at
SEND_DATA_PERIOD interval.

This script is supposed to be run by the Android Job Scheduler,
which has a minimum period of 15 minutes. So the main loop
executes for that time (default), then exits.

  * Requires Android apps: Termux and Termux:API
  * Requires Termux package: termux-api
  * Requires Android permission for Termux:API:
    ACCESS_FINE_LOCATION and/or ACCESS_COARSE_LOCATION

This is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
"""

import configparser
import datetime
import errno
import gzip
import hashlib
import json
import os
import os.path
import signal
import socket
import subprocess
import sys
import time

NAME = os.path.basename(sys.argv[0])
DIRNAME = os.path.dirname(sys.argv[0])
# CONFIG_FILE will be searched in current dir or in prog DIRNAME.
CONFIG_FILE = '%s.ini' % (NAME,)
if not os.path.exists(CONFIG_FILE):
    CONFIG_FILE = os.path.join(DIRNAME, CONFIG_FILE)

#-------------------------------------------------------------------------
# Initialize logging.
#-------------------------------------------------------------------------
VERBOSE = False
if len(sys.argv) > 1:
    if sys.argv[1] == '-v':
        VERBOSE = True
def my_log(msg):
    if VERBOSE:
        print(msg)

#-------------------------------------------------------------------------
# Read config file, eventually merge hard-coded defaults.
#-------------------------------------------------------------------------
config = configparser.ConfigParser()
config['DEFAULT'] = {
    # Remote host will use MY_NAME and REMOTE_PSK (password) to verify data.
    'my_name': '',
    'remote_host': '',
    'remote_port': '33897',
    'remote_psk': '',
    # See "termux-location -h" for help.
    'location_cmd': 'termux-location -p passive -r last',
    # Max time in seconds to wait for LOCATION_CMD to complete.
    'location_cmd_timeout': '15',
    # Exit after TIME_TO_LIVE seconds, or loop forever if zero.
    # The Job Scheduler eventually will restart this, and the
    # new instance will kill the running one.
    'time_to_live': str(15 * 60 + 20),
    # Acquire a track point every SAMPLE_PERIOD seconds.
    'sample_period': '5',
    # Send track points to server every SEND_DATA_PERIOD seconds.
    'send_data_period': '30',
    # Discard unsent data buffer if it grows over MAX_BUFFER bytes.
    # The theoretical limit is about 65507 bytes.
    'max_buffer': '49152',
    # Directory for termux-gps-track.ini, PID file, temporary files.
    'home_dir': '/data/data/com.termux/files/home'
}
try:
    config.read(CONFIG_FILE)
    my_log(u'DEBUG: Using config "%s"' % (CONFIG_FILE,))
except:
    my_log(u'DEBUG: Error reading config "%s"' % (CONFIG_FILE,))
# Create a dummy [current] section, just to use [DEFAULT].
config['current'] = {}
cfg = config['current']

MY_NAME = cfg.get('my_name')
REMOTE_HOST = cfg.get('remote_host')
REMOTE_PORT = cfg.getint('remote_port')
REMOTE_PSK = cfg.get('remote_psk')
LOCATION_CMD = cfg.get('location_cmd').split()
LOCATION_CMD_TIMEOUT = cfg.getint('location_cmd_timeout')
TIME_TO_LIVE = cfg.getint('time_to_live')
SAMPLE_PERIOD = cfg.getint('sample_period')
SEND_DATA_PERIOD = cfg.getint('send_data_period')
MAX_BUFFER = cfg.getint('max_buffer')
HOME_DIR = cfg.get('home_dir')
# Data files, relative to HOME_DIR.
PID_FILE = os.path.join(HOME_DIR, '%s.pid' % (NAME,))
FILE_LOCATIONS_SAVED = os.path.join(HOME_DIR, 'location.json')
FILE_LOCATIONS_DISCARDED = os.path.join(HOME_DIR, 'location.%s.json')


#-------------------------------------------------------------------------
#-------------------------------------------------------------------------
def cmd_json(cmd, maxtime=10):
    """ Return the JSON-decoded output of an external command """
    try:
        json_output = subprocess.check_output(cmd, stderr=subprocess.STDOUT, timeout=maxtime).decode('utf-8')
    except Exception as e:
        json_output = json.dumps({'Exception': str(e)})
    try:
        output_obj = json.loads(json_output)
    except:
        output_obj = None
    return output_obj

#-------------------------------------------------------------------------
#-------------------------------------------------------------------------
def send_data(location):
    """ Send UDP datagram to remote host, with locations """
    data = {}
    if REMOTE_HOST == '':
        my_log(u'ERROR: send_data(): Remote host is blank')
        return False
    data['hostname'] = MY_NAME
    data['termux_locations'] = location
    my_log(u'DEBUG: Sending data to host "%s:%d": %s' % (REMOTE_HOST, REMOTE_PORT, data,))
    data_json = json.dumps(data)
    # Sign with PSK.
    data_signed = data_json + REMOTE_PSK
    data_md5 = hashlib.md5(data_signed.encode('utf-8')).hexdigest()
    payload = data_json + data_md5
    payload_gzip = gzip.compress(payload.encode('utf-8'), compresslevel=9)
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        sock.sendto(payload_gzip, (REMOTE_HOST, REMOTE_PORT))
        sock.close()
        return True
    except Exception as e:
        my_log(u'ERROR: send_data() Exception: %s' % (str(e),))
        return False

#-------------------------------------------------------------------------
#-------------------------------------------------------------------------
def load_saved_data():
    """ Load unsent location data from a saved JSON file """
    location = {}
    if os.path.exists(FILE_LOCATIONS_SAVED):
        try:
            with open(FILE_LOCATIONS_SAVED, 'r') as f:
                location = json.load(f)
            os.remove(FILE_LOCATIONS_SAVED)
            my_log(u'INFO: Saved locations successfully re-loaded: "%s"' % (FILE_LOCATIONS_SAVED,))
        except Exception as e:
            my_log(u'ERROR: load_saved_data() Exception: %s' % (str(e),))
    return location

#-------------------------------------------------------------------------
#-------------------------------------------------------------------------
def save_data(location, filename):
    """ Save unsent location data to a JSON file """
    try:
        with open(filename, 'w') as f:
            json.dump(location, f)
        my_log(u'INFO: Locations data saved successfully: "%s"' % (filename,))
    except Exception as e:
        my_log(u'ERROR: save_data() Exception: %s' % (str(e),))

#-------------------------------------------------------------------------
# If PID file exists, try to kill the running process.
#-------------------------------------------------------------------------
def write_pid(kill_running=True):
    """ Return True if can create its own PID file """
    if kill_running and os.path.exists(PID_FILE):
        try:
            with open(PID_FILE, 'r') as f:
                pid = int(f.read())
            my_log(u'DEBUG: Sending SIGTERM to process ID %d' % (pid,))
            os.kill(pid, signal.SIGTERM)
            time.sleep(2)
        except:
            pass
    try:
        if os.path.exists(PID_FILE):
            with open(PID_FILE, 'r') as f:
                pid = int(f.read())
            my_log(u'DEBUG: Found PID file with process ID %d' % (pid,))
            try:
                # Send a dummy (zero) signal to the PID.
                os.kill(pid, 0)
                proc_exists = True
            except OSError as err:
                if err.errno == errno.ESRCH:
                    # ESRCH == No such process
                    proc_exists = False
                elif err.errno == errno.EPERM:
                    # EPERM == Process exists, but deny access
                    proc_exists = True
                else:
                    # Other errors (may be EINVAL)
                    raise
            if proc_exists:
                my_log(u'ERROR: PID file exists and process %d is running' % (pid,))
                return False
            else:
                my_log(u'DEBUG: PID file is stale, removing')
                os.remove(PID_FILE)
        with open(PID_FILE, 'w') as f:
            f.write(str(os.getpid()))
        my_log(u'DEBUG: Wrote PID file "%s"' % (PID_FILE,))
        return True
    except Exception as e:
        my_log(u'ERROR: write_pid() Exception: %s' % (str(e),))
        return False

#-------------------------------------------------------------------------
#-------------------------------------------------------------------------
def exit_program(signum, frame):
    """ Perform clean-up of PID file and save unsent data """
    if signal is not None:
        my_log(u'INFO: Received signal %s, exiting' % (signum,))
    else:
        my_log(u'INFO: Exiting program')
    save_data(location, FILE_LOCATIONS_SAVED)
    os.remove(PID_FILE)
    sys.exit(0)


#-------------------------------------------------------------------------
# Main loop: collect data and send to remote host.
#-------------------------------------------------------------------------
if __name__ == '__main__':
    # Check the PID file to avoid concurrent executions, eventually
    # kill an already running instance.
    if not write_pid():
        sys.exit(1)
    location = load_saved_data()
    start_time = int(time.time())
    sent_time = start_time
    time_now = start_time
    signal.signal(signal.SIGINT, exit_program)
    signal.signal(signal.SIGTERM, exit_program)
    # Send to remote only one error per type.
    got_error_termux = False
    got_error_api = False
    while TIME_TO_LIVE > 0 and (time_now - start_time) < TIME_TO_LIVE:
        loc = cmd_json(LOCATION_CMD, maxtime=LOCATION_CMD_TIMEOUT)
        if 'error' in loc:
            my_log(u'ERROR: termux-location: %s' % (loc['error'],))
            if not got_error_termux:
                location[str(time_now)] = loc
                got_error_termux = True
        elif 'API_ERROR' in loc:
            my_log(u'ERROR: Android API: %s' % (loc['API_ERROR'],))
            if not got_error_api:
                location[str(time_now)] = loc
                got_error_api = True
        else:
            my_log(u'INFO: Got location with timestamp %d' % (time_now,))
            my_log(u'DEBUG: %s' % (location[str(time_now)],))
            location[str(time_now)] = loc
        if (time_now - sent_time) > SEND_DATA_PERIOD:
            if send_data(location):
                my_log(u'INFO: Sent UDP datagram to remote host')
                location = {}
                got_error_termux = False
                got_error_api = False
            else:
                unsent_bytes = len(gzip.compress(json.dumps(location).encode('utf-8'), compresslevel=9))
                if unsent_bytes > MAX_BUFFER:
                    my_log(u'WARNING: Too many unsent data, discarding %d records' % (len(location),))
                    filename = FILE_LOCATIONS_DISCARDED % (datetime.datetime.now().strftime("%Y%m%d%H%M%S"))
                    save_data(location, filename)
                    location = {}
                else:
                    my_log(u'INFO: Keeping unsent data: %d records (%d bytes)' % (len(location), unsent_bytes))
            sent_time = time_now
        time.sleep(SAMPLE_PERIOD)
        time_now = int(time.time())
    # Main loop is terminated, flush or save unsent data.
    if len(location) > 0:
        if not send_data(location):
            save_data(location, FILE_LOCATIONS_SAVED)
    exit_program(None, None)
