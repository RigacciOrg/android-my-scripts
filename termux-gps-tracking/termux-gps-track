#!/data/data/com.termux/files/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Copyright (C) 2019 Niccolo Rigacci <niccolo@rigacci.org>

Acquire GPS positions (actually Android locations) via the
Termux:API at specified time intervals, then send collected data
to a remote host via UDP datagrams, at other specified intervals.

The main loop runs for TIME_TO_LIVE seconds, collecting location
data at SAMPLE_PERIOD interval and sending it to REMOTE_HOST at
SEND_DATA_PERIOD interval.

This script is supposed to be run by the Android Job Scheduler,
which has a minimum period of 15 minutes. So the main loop
executes for that time (default), then exits.

  * Requires Termux package: termux-api
  * Requires Android permission ACCESS_FINE_LOCATION for Termux:API

This is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
"""

import configparser
import datetime
import errno
import gzip
import hashlib
import json
import os
import os.path
import signal
import socket
import subprocess
import sys
import time

__author__ = "Niccolo Rigacci"
__copyright__ = "Copyright 2019 Niccolo Rigacci <niccolo@rigacci.org>"
__license__ = "GPLv3-or-later"
__email__ = "niccolo@rigacci.org"
__version__ = "0.2.0"

LOG_LEVEL = {
    'DEBUG':    10,
    'INFO':     20,
    'NOTICE':   25,
    'WARNING':  30,
    'ERROR':    40,
    'CRITICAL': 50,
    'NONE':    100
}

#-------------------------------------------------------------------------
#-------------------------------------------------------------------------
class remoteLogger():

    def __init__(self):
        self.prog_name = os.path.basename(sys.argv[0])
        self.dir_name = os.path.dirname(sys.argv[0])
        self.cfg_file = '%s.ini' % (self.prog_name,)
        if not os.path.exists(self.cfg_file):
            self.cfg_file = os.path.join(self.dir_name, self.cfg_file)
        self.read_config()
        self.my_log(u'Starting %s with config "%s"' % (self.prog_name, self.cfg_file), 'INFO')
        self.pid_file = os.path.join(self.home_dir, '%s.pid' % (self.prog_name,))
        self.file_locations_saved = os.path.join(self.home_dir, 'location.json')
        self.file_locations_discarded = os.path.join(self.home_dir, 'location.%s.json')
        self.location = {}

    def read_config(self):
        """ Merge default options with ini file """
        config = configparser.ConfigParser()
        # Customize the following defaults into the .ini file.
        config['DEFAULT'] = {
            # remote_host will use my_name and remote_psk to verify data.
            'my_name': '',
            'remote_host': '',
            'remote_port': '33897',
            'remote_psk': '',
            # See "termux-location -h" for help.
            'location_cmd': 'termux-location -p passive -r last',
            # Max time in seconds to wait for location_cmd to complete.
            'location_cmd_timeout': '15',
            # Exit main loop after time_to_live seconds, or loop forever if zero.
            'time_to_live': str(15 * 60 + 20),
            # Acquire a track point every sample_period seconds.
            'sample_period': '5',
            # Send track points to remote every send_data_period seconds.
            'send_data_period': '30',
            # Discard unsent data buffer if it grows over max_buffer bytes.
            # The theoretical limit for UDP datagrams is about 65507 bytes.
            'max_buffer': '49152',
            # Directory for ini file, PID file, temporary files.
            'home_dir': '.',
            # File name to append log to, or 'stdout'.
            'log_to': 'stdout',
            # Values: DEBUG INFO NOTICE WARNING ERROR CRITICAL NONE
            'logging': 'DEBUG'
        }
        try:
            config.read(self.cfg_file)
        except Exception as e:
            print(u'ERROR: Reading config "%s": %s' % (self.cfg_file, str(e)))
            sys.exit(1)
        # Create a dummy [current] section to merge [DEFAULT] and file.
        config['current'] = {}
        cfg = config['current']
        self.my_name = cfg.get('my_name')
        self.remote_host = cfg.get('remote_host')
        self.remote_port = cfg.getint('remote_port')
        self.remote_psk = cfg.get('remote_psk')
        self.location_cmd = cfg.get('location_cmd').split()
        self.location_cmd_timeout = cfg.getint('location_cmd_timeout')
        self.time_to_live = cfg.getint('time_to_live')
        self.sample_period = cfg.getint('sample_period')
        self.send_data_period = cfg.getint('send_data_period')
        self.max_buffer = cfg.getint('max_buffer')
        self.home_dir = cfg.get('home_dir')
        self.log_to = cfg.get('log_to')
        self.logging = LOG_LEVEL[cfg.get('logging')]

    def my_log(self, msg, level):
        """ Write a message to file or stdout """
        if LOG_LEVEL[level] >= self.logging:
            line = '%s %-8s %s' % (time.strftime('%Y-%m-%d %H:%M:%S'), level, msg)
            if self.log_to == 'stdout':
                print(line)
            else:
                line += '\n'
                with open(self.log_to, 'a') as f:
                    f.write(line)

    def acquire_pid(self, kill_running=True):
        """ Return True if can create the PID file, eventually killing a running instance """
        if kill_running and os.path.exists(self.pid_file):
            try:
                with open(self.pid_file, 'r') as f:
                    pid = int(f.read())
                self.my_log(u'Found PID file, sending SIGTERM to process %d' % (pid,), 'DEBUG')
                os.kill(pid, signal.SIGTERM)
                time.sleep(1)
            except:
                pass
        try:
            if os.path.exists(self.pid_file):
                with open(self.pid_file, 'r') as f:
                    pid = int(f.read())
                self.my_log(u'Found PID file for process %d' % (pid,), 'DEBUG')
                try:
                    # Send a dummy (zero) signal to the PID.
                    os.kill(pid, 0)
                    proc_exists = True
                except OSError as err:
                    if err.errno == errno.ESRCH:
                        # ESRCH == No such process
                        proc_exists = False
                    elif err.errno == errno.EPERM:
                        # EPERM == Process exists, but deny access
                        proc_exists = True
                    else:
                        # Other errors (may be EINVAL)
                        raise
                if proc_exists:
                    self.my_log(u'PID file exists and process %d still running' % (pid,), 'ERROR')
                    return False
                else:
                    self.my_log(u'PID file is stale, removing it', 'DEBUG')
                    os.remove(self.pid_file)
            with open(self.pid_file, 'w') as f:
                f.write(str(os.getpid()))
            self.my_log(u'Created PID file "%s"' % (self.pid_file,), 'INFO')
            return True
        except Exception as e:
            self.my_log(u'write_pid() Exception: %s' % (str(e),), 'ERROR')
            return False

    def cmd_json(self, cmd, maxtime=10):
        """ Return the JSON-decoded output of an external command """
        try:
            json_output = subprocess.check_output(cmd, stderr=subprocess.STDOUT, timeout=maxtime).decode('utf-8')
        except Exception as e:
            json_output = json.dumps({'Exception': str(e)})
        try:
            output_obj = json.loads(json_output)
        except:
            output_obj = None
        return output_obj

    def save_data(self, filename=None):
        """ Save unsent location data to a JSON file """
        if filename == None:
            filename = self.file_locations_saved
        try:
            with open(filename, 'w') as f:
                json.dump(self.location, f)
            self.my_log(u'Saved %d location records to "%s"' % (len(self.location), filename), 'INFO')
        except Exception as e:
            self.my_log(u'save_data() Exception: %s' % (str(e),), 'ERROR')

    def load_saved_data(self):
        """ Load unsent location data from a saved JSON file """
        self.location = {}
        if os.path.exists(self.file_locations_saved):
            try:
                with open(self.file_locations_saved, 'r') as f:
                    self.location = json.load(f)
                os.remove(self.file_locations_saved)
                self.my_log(u'Reloaded %d location records from "%s"' % (len(self.location), self.file_locations_saved), 'INFO')
            except Exception as e:
                self.my_log(u'load_saved_data() Exception: %s' % (str(e),), 'ERROR')
                self.location = {}

    def send_data(self):
        """ Send UDP datagram to remote host, with locations """
        data = {}
        if self.remote_host == '':
            self.my_log(u'send_data(): Remote host is blank', 'ERROR')
            return False
        data['hostname'] = self.my_name
        data['termux_locations'] = self.location
        self.my_log(u'Sending data to host "%s:%d": %s' % (self.remote_host, self.remote_port, data,), 'DEBUG')
        data_json = json.dumps(data)
        # Sign with PSK.
        data_signed = data_json + self.remote_psk
        data_md5 = hashlib.md5(data_signed.encode('utf-8')).hexdigest()
        payload = data_json + data_md5
        payload_gzip = gzip.compress(payload.encode('utf-8'), compresslevel=9)
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            sock.sendto(payload_gzip, (self.remote_host, self.remote_port))
            sock.close()
            return True
        except Exception as e:
            self.my_log(u'send_data() Exception: %s' % (str(e),), 'ERROR')
            return False

    def mainLoop(self):
        """ Main loop: collect data and send to remote host """
        start_time = int(time.time())
        sent_time = start_time
        time_now = start_time
        # Send to remote only one error per type.
        got_error_termux = False
        got_error_api = False
        while self.time_to_live > 0 and (time_now - start_time) < self.time_to_live:
            loc = self.cmd_json(self.location_cmd, maxtime=self.location_cmd_timeout)
            if 'error' in loc:
                self.my_log(u'termux-location: %s' % (loc['error'],), 'ERROR')
                if not got_error_termux:
                    self.location[str(time_now)] = loc
                    got_error_termux = True
            elif 'API_ERROR' in loc:
                self.my_log(u'Android API: %s' % (loc['API_ERROR'],), 'ERROR')
                if not got_error_api:
                    self.location[str(time_now)] = loc
                    got_error_api = True
            else:
                self.my_log(u'Got location at timestamp %d' % (time_now,), 'INFO')
                self.my_log(loc, 'DEBUG')
                self.location[str(time_now)] = loc
            if (time_now - sent_time) > self.send_data_period:
                if self.send_data():
                    self.my_log(u'Sent UDP datagram with %d records to remote host' % (len(self.location),), 'INFO')
                    # TODO: Wait for some acknowledge, if required.
                    self.location = {}
                    got_error_termux = False
                    got_error_api = False
                else:
                    unsent_bytes = len(gzip.compress(json.dumps(self.location).encode('utf-8'), compresslevel=9))
                    if unsent_bytes > self.max_buffer:
                        self.my_log(u'Too many unsent data, discarding %d records' % (len(self.location),), 'WARNING')
                        filename = self.file_locations_discarded % (datetime.datetime.now().strftime("%Y%m%d%H%M%S"))
                        self.save_data(filename)
                        self.location = {}
                    else:
                        self.my_log(u'Keeping unsent data: %d records (%d bytes)' % (len(self.location), unsent_bytes), 'INFO')
                sent_time = time_now
            time.sleep(self.sample_period)
            time_now = int(time.time())

    def clean_exit(self, signum, frame):
        """ Save unsent data, remove PID file and exit """
        if signum is not None:
            self.my_log(u'Received signal %s, exiting' % (signum,), 'INFO')
        else:
            self.my_log(u'Exiting program', 'INFO')
        self.save_data()
        os.remove(self.pid_file)
        sys.exit(0)

#-------------------------------------------------------------------------
#-------------------------------------------------------------------------
if __name__ == '__main__':
    myLogger = remoteLogger()
    signal.signal(signal.SIGINT, myLogger.clean_exit)
    signal.signal(signal.SIGTERM, myLogger.clean_exit)
    # Acquire PID file to avoid concurrent executions.
    if not myLogger.acquire_pid(kill_running=True):
        sys.exit(1)
    myLogger.load_saved_data()
    myLogger.mainLoop()
    # Flush or save unsent data.
    if len(myLogger.location) > 0:
        if not myLogger.send_data():
            myLogger.save_data()
    myLogger.clean_exit(None, None)
